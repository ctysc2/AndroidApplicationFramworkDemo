package com.cmcc.migutvtwo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cmcc.migutvtwo.dao.PlayMemory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PLAY_MEMORY.
*/
public class PlayMemoryDao extends AbstractDao<PlayMemory, String> {

    public static final String TABLENAME = "PLAY_MEMORY";

    /**
     * Properties of entity PlayMemory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Cid = new Property(1, String.class, "cid", false, "CID");
        public final static Property Lback = new Property(2, String.class, "lback", false, "LBACK");
        public final static Property Playtime = new Property(3, Integer.class, "playtime", false, "PLAYTIME");
    };


    public PlayMemoryDao(DaoConfig config) {
        super(config);
    }
    
    public PlayMemoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PLAY_MEMORY' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'CID' TEXT," + // 1: cid
                "'LBACK' TEXT," + // 2: lback
                "'PLAYTIME' INTEGER);"); // 3: playtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PLAY_MEMORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlayMemory entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(2, cid);
        }
 
        String lback = entity.getLback();
        if (lback != null) {
            stmt.bindString(3, lback);
        }
 
        Integer playtime = entity.getPlaytime();
        if (playtime != null) {
            stmt.bindLong(4, playtime);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PlayMemory readEntity(Cursor cursor, int offset) {
        PlayMemory entity = new PlayMemory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lback
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // playtime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlayMemory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLback(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlaytime(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(PlayMemory entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(PlayMemory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
